from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader, TensorDataset
import torch.optim as optim
import torch

# Initialize tokenizer and model
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=1)  # num_labels=1 for regression task

# Prepare data
notes = ["note_1", "note_2", ...]
scores = [score_1, score_2, ...]
encodings = tokenizer(notes, truncation=True, padding=True)
input_ids = encodings['input_ids']
attention_mask = encodings['attention_mask']
labels = torch.tensor(scores)

# Convert encoded notes and scores to PyTorch tensors
input_ids = torch.tensor(input_ids)
attention_mask = torch.tensor(attention_mask)
labels = torch.tensor(scores)

# Create DataLoader
dataset = TensorDataset(input_ids, attention_mask, labels)
dataloader = DataLoader(dataset, batch_size=16, shuffle=True)

# Define optimizer
optimizer = optim.AdamW(params=model.parameters(), lr=1e-5)

for epoch in range(3):
    for i, batch in enumerate(dataloader):
        input_ids, attention_mask, labels = [b.to(device) for b in batch]
        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
        
        # Print progress
        if i % 10 == 0:  # Print every 10 batches
            print(f'Epoch: {epoch+1}, Batch: {i}, Loss: {loss.item()}')

